[
  {
    "objectID": "pages/overview.html",
    "href": "pages/overview.html",
    "title": "Overview",
    "section": "",
    "text": "The goal of this project is to write functions that will manipulate and process data sets that come from a census API. We have created generic functions to automatically summarize and plot certain returned data.",
    "crumbs": [
      "Home",
      "Overview"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project 1 Index",
    "section": "",
    "text": "Table of Contents:\n\nOverview: Introduction and description of workflow\nData Processing: Functions to query API and summarize data\ninvestigation: Using functions to investigate data",
    "crumbs": [
      "Home",
      "Project 1 Index"
    ]
  },
  {
    "objectID": "pages/data_processing.html",
    "href": "pages/data_processing.html",
    "title": "Data Processing",
    "section": "",
    "text": "This notebook contains several functions that will allow users to query the Census API with their own inputs, and then explore the data through summary statistics.\n\nImport necessary libraries\n\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\n\n\n\nHelper function to turn result of API call into a tibble\n\nto_tibble &lt;- function(request) {\n  data &lt;- fromJSON(rawToChar(request$content))\n  data &lt;- as_tibble(data[-1, ])\n  \n  # Assign column names\n  col_names &lt;- data[1, ]\n  colnames(data) &lt;- col_names \n  \n  # Return tibble\n  return(data)\n}\n\n\n\nFunction to query the census API with user input\n\nquery_pums &lt;- function(\n    year = 2022,\n    num_vars = c('AGEP', 'PWGTP'),\n    cat_vars = 'SEX',\n    geo_level = 'All',\n    subset = NULL\n) {\n  \n  # Stop if year is not between 2010 and 2022\n  if (!year %in% 2010:2022)\n    stop('Year must be between 2010 and 2022.')\n  \n  # Define valid numeric variables\n  valid_num &lt;- c('AGEP', 'PWGTP', 'GASP', 'GRPIP', 'JWAP', 'JWDP', 'JWMNP')\n  \n  # Stop if num_vars input is valid\n  if (!all(num_vars %in% valid_num))\n    stop('Invalid input for numeric variables.')\n  # Stop if PWGTP is not returned\n  if (!'PWGTP' %in% num_vars)\n    stop('PWGTP must be returned.')\n  # Stop if less than 2 numeric variables are returned\n  if (length(num_vars) &lt; 2)\n    stop('At least one numeric variable aside from PWGTP must be returned.')\n  \n  # Define valid categorical variables\n  valid_cat &lt;- c('FER', 'HHL', 'HISPEED', 'JWTRNS', 'SCH', 'SCHL', 'SEX')\n  \n  # Stop if cat_vars input is invalid\n  if (!all(cat_vars %in% valid_cat))\n    stop('Invalid input for categorical variables.')\n  # Stop if no categorical variables are returned\n  if (length(cat_vars) &lt; 1)\n    stop('At least one categorical variable must be returned.')\n  \n  # Define valid inputs for geography\n  valid_geo &lt;- c('All', 'Region', 'Division', 'State')\n  \n  # Stop if geo_level input is not valid\n  if (!geo_level %in% valid_geo)\n    stop('Invalid input for geography level.')\n  \n  # Base URL\n  url &lt;- 'api.census.gov/data'\n  # Data set we want to query\n  dataset &lt;- 'acs/acs1/pums'\n  # Variables to query\n  vars &lt;- c(num_vars, cat_vars)\n  \n  # Build URL with user inputs\n  api_url &lt;- paste0(\n    url, \"/\", year, \"/\", dataset,\n    \"?get=\", paste(vars, collapse = \",\")\n  )\n  \n  # Geography level subsetting\n  geo_map &lt;- c(\n    Region   = \"region:*\",\n    Division = \"division:*\",\n    State    = \"state:*\"\n  )\n  \n  # allow users to specify subsets of geography level\n  if (!is.null(subset)) {\n    if (geo_level == 'State') {\n      api_url &lt;- paste0(api_url, '&for=state:', paste(subset, collapse = ','))\n    }\n    if (geo_level == 'Region') {\n      api_url &lt;- paste0(api_url, '&for=region:', paste(subset, collapse = ','))\n    }\n    if (geo_level == 'Division') {\n      api_url &lt;- paste0(api_url, '&for=division:', paste(subset, collapse = ','))\n    }\n  } else if (geo_level != 'All') {\n    api_url &lt;- paste0(api_url, '&for=', geo_map[[geo_level]])\n  }\n  \n  # Query the API\n  request &lt;- GET(api_url)\n  \n  # Call helper function to turn query results into tibble\n  data &lt;- to_tibble(request)\n  \n  #TO BE ADDED: ensure data types are correct\n  \n  # For summary function\n  class(data) &lt;- c(\"census\", class(data))\n  \n  return(data)\n}\n\n\nTest query_pums() function\nWithout sub-setting the geography level, this function is time consuming to run.\n\nquery_pums(\n  year = 2022,\n  num_vars = c('AGEP', 'PWGTP', 'GRPIP'),\n  cat_vars = c('SEX', 'HISPEED'),\n  geo_level = 'State',\n  subset='06'\n)\n\n# A tibble: 391,171 × 6\n   `56`  `14`  `0`   `2`   `0`   `06` \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 56    14    0     2     0     06   \n 2 52    27    0     1     0     06   \n 3 61    70    0     1     0     06   \n 4 26    22    0     2     0     06   \n 5 38    8     0     2     0     06   \n 6 23    49    0     1     0     06   \n 7 20    63    0     1     0     06   \n 8 79    14    0     2     0     06   \n 9 20    49    0     2     0     06   \n10 43    47    0     1     0     06   \n# ℹ 391,161 more rows\n\n\nAdd function to specify multiple years of survey data & generic function to summarize",
    "crumbs": [
      "Home",
      "Data Processing"
    ]
  },
  {
    "objectID": "pages/overview.html#project-goal",
    "href": "pages/overview.html#project-goal",
    "title": "Overview",
    "section": "",
    "text": "The goal of this project is to write functions that will manipulate and process data sets that come from a census API. We have created generic functions to automatically summarize and plot certain returned data.",
    "crumbs": [
      "Home",
      "Overview"
    ]
  },
  {
    "objectID": "pages/overview.html#project-components",
    "href": "pages/overview.html#project-components",
    "title": "Overview",
    "section": "Project Components",
    "text": "Project Components\nTibble helper function:\n\nAdd info about to_tibble helper function\nAdd example useage\n\nAPI query function:\n\nThis function allows the user to query the PUMS API with their own inputs.\nThe user can change the year of survey, the numeric and categorical variables retrieved, and the geography level.\nExample Usage:\n# Default Arguments\nquery_pums(\n  year = 2022,\n  num_vars = c('AGEP', 'PWGTP'),\n  cat_vars = 'SEX',\n  geo_level = 'All',\n  subset = NULL\n)\nNote: it is not recommended to call query_pums() without sub-setting the geography level unless necessary- this will be time-consuming due to the size of the census data sets.\n# Specifying a geography level and subset\nquery_pums(\n  geo_level = 'State',\n  subset = '37'\n)\n\n# Specifying multiple geography levels\nquery_pums(\n  geo_level = 'Region',\n  subset = c('1', '3')\n)",
    "crumbs": [
      "Home",
      "Overview"
    ]
  },
  {
    "objectID": "pages/data_investigation.html",
    "href": "pages/data_investigation.html",
    "title": "Census Data Investigation",
    "section": "",
    "text": "This is where we will investigate something interesting from the data using the API function and plotting/summarizing functions.",
    "crumbs": [
      "Home",
      "Census Data Investigation"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Project Overview",
    "section": "",
    "text": "Overview: Introduction and description of workflow\nData Processing: Functions to query API and summarize data\ninvestigation: Using functions to investigate data",
    "crumbs": [
      "Home",
      "Project Overview"
    ]
  },
  {
    "objectID": "overview.html#project-goal",
    "href": "overview.html#project-goal",
    "title": "Project Overview",
    "section": "Project Goal",
    "text": "Project Goal\nThe goal of this project is to write functions that will manipulate and process data sets that come from a census API. We have created generic functions to automatically summarize and plot certain returned data.",
    "crumbs": [
      "Home",
      "Project Overview"
    ]
  },
  {
    "objectID": "overview.html#project-components",
    "href": "overview.html#project-components",
    "title": "Project Overview",
    "section": "Project Components",
    "text": "Project Components\nTibble helper function:\n\nAdd info about to_tibble helper function\nAdd example usage\n\nQuery Census API function:\n\nThis function allows the user to query the PUMS API with their own inputs.\nThe user can change the year of survey, the numeric and categorical variables retrieved, and the geography level.\nExample Usage:\n# Default Arguments\nquery_pums(\n  year = 2022,\n  num_vars = c('AGEP', 'PWGTP'),\n  cat_vars = 'SEX',\n  geo_level = 'All',\n  subset = NULL\n)\nNote: it is not recommended to call query_pums() without sub-setting the geography level unless necessary. This will be time-consuming due to the size of the census data sets.\n# Specifying a geography level and subset\nquery_pums(\n  geo_level = 'State',\n  subset = '37'\n)\n\n# Specifying multiple geography levels\nquery_pums(\n  geo_level = 'Region',\n  subset = c('1', '3')\n)",
    "crumbs": [
      "Home",
      "Project Overview"
    ]
  }
]